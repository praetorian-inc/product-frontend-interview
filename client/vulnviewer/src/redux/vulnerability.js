import { createSlice } from '@reduxjs/toolkit';

// Mock data
import allVulnerabilitiesJson from './allVulnerabilities.json';

const axios = require("axios").default;

// Mock adapter to pretend we're interacting with a real server

const MockAdapter = require("axios-mock-adapter");
const mock = new MockAdapter(axios);

export const vulnerabilitySlice = createSlice({
  name: 'vulnerability',
  initialState: {
    allVulnerabilities: [],
  },
  reducers: {
    loadAllVulnerabilities: (state, action) => {
      return {
        ...state,
          allVulnerabilities: action.payload.allVulnerabilities
      }
    }
  }
})

export function loadAllVulnerabilities() {
  return async (dispatch, getState) => {
    try {
      const response = await axios.get("/api/v1/vulnerability");

      const allVulnerabilities = response.data;

      dispatch({
        type: "vulnerability/loadAllVulnerabilities",
        payload: { allVulnerabilities: allVulnerabilities.data },
      });

    } catch (err) {
      console.log(err);
      // Do nothing
    } 
  }
}

export const selectAllVulnerabilities = state => {
  return state.vulnerability.allVulnerabilities;
}

export default vulnerabilitySlice.reducer;

mock.onGet("/api/v1/vulnerability").reply(async function (config) {

  // 4-second delay to mimic a real network
  await new Promise(r => setTimeout(r, 4000));

  return [
    200,
    allVulnerabilitiesJson,
  ];
});

mock.onGet(/\/api\/v1\/vulnerability\/\d+/).reply(async function (config) {
  const uuid = config.url.substr(22);

  const vuln = allVulnerabilitiesJson.data.find(vuln => vuln.id === uuid);

  return [
    !vuln ? 404 : 200,
    vuln,
  ];
});